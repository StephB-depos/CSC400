// This Bag class will extend our Inventory class and provide the actual implementation for our abstract methods
// Well use a linked list to store the items and well create a node class to represent each element in the bag
public class Bag<T> extends Inventory<T> {
	// first Node in linked list (head)
	private Node<T> head;
	
	// Initialize our empty bag (Constructor)
	public Bag() {
		head = null;
	}
	// check if bag is empty
	@Override
	public boolean isEmpty() {
		// if the head is null == the bag is empty.
		return head == null;
	}
	
	// Now we can create our methods to add
	@Override
	public void add(T item) {
		// first we should check to see if the item already exists and if it does change the count
		Node<T> current = head;
		// loop through the linked list check all nodes
		while(current != null) {  // while the current node is not null
			// check if the current node contains the item we're looking for
			if(current.item.equals(item)) {
				// if the item is found - increment the count by one
				current.count++;
				// once incremented we can return since the task is complete
				return;
			}
			// move on to the next node to continue searching
			current = current.next;
		}
		// if the item is NOT found create a new node and add it to the front of our list
		Node<T> newNode = new Node<>(item);
		// make the new node the current head
		newNode.next = head;
		// update the head to the new Node
		head = newNode;
	}
	// Our method to remove items from our bag
	@Override
	public void remove(T item) {
		Node<T> current = head;  // start at the head of the linked list
		Node<T> previous = null;  // keep track of the previous node so we can remove the item
		
		// find the item in our bag/linked list
		while(current != null) {  // as long as the current node is not null - loop through our list
			if(current.item.equals(item)) {  // if the current item equals an item in the list
				if(current.count > 1) {  // if the current item is found more than once
					current.count--; // decrease the count of the item by 1
					
				} else {
					// if the count is 1 - remove it completely
					if(previous == null) {
						head = current.next; // if the item is at the beginning, update to the next node
					} else {
						previous.next = current.next; // otherwise bypass the current node
					}
				}
				return; // exit the method when item is remove or the count is updated
				
			}
			// move the previous pointer to the current node
			previous = current;
			// move to the next node
			current = current.next;
		}
	}
	@Override
	// lets check if an item exists in the bag
	public boolean contains(T item) {
		Node<T> current = head;  // start at the head of the list (beginning)
		// go through the list
		while(current != null) {
			// if you find the item
			if(current.item.equals(item)) {
				// return true
				return true;
			}
			// move to the next node
			current = current.next;
		}
		// return false if item is not found
		return false;
	}
	// method to count items in our bag
	@Override
	public int count(T item) {
		// start at the head of the list
		Node<T> current = head;
		// go through the list
		while(current != null) {
			// if the item is in the list
			if(current.item.equals(item)) {
				// return the count of the item
				return current.count;
			}
			// move to the next node
			current = current.next;
		}
		// if the item is not found return 0
		return 0;
	}
	// our method to print out our contents of the bag
	@Override
	public void printContents() {
		// if the bag is empty
		if (head == null) {
			// print that the inventory is empty
			System.out.println("Medical Inventory: EMPTY");
			// exit the method
			return;
		}
		// heading for inventory content
		System.out.println("Medical Inventory Contents:");
		// start at the beginning of list(head)
		Node<T> current = head;
		// go through the list
		while (current != null) {
			 // print the item and the amount of item
			System.out.println("Medical Item: " + current.item + "\n Item Amount: " + current.count);
			// move to the next node
			current = current.next;
		}
	}
}
